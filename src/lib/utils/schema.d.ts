/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/users/invalidate_token": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Invalidate Token */
		delete: operations["invalidate_token_api_users_invalidate_token_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/invalidate_all_tokens": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Invalidate All Tokens */
		delete: operations["invalidate_all_tokens_api_users_invalidate_all_tokens_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/get_new_api_token": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Get New Api Token */
		post: operations["get_new_api_token_api_users_get_new_api_token_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/get_all_token_info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get All Token Info */
		get: operations["get_all_token_info_api_users_get_all_token_info_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Token Info */
		get: operations["token_info_api_users_info_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/info_db": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** User Info */
		get: operations["user_info_api_users_info_db_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/users/delete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete User */
		delete: operations["delete_user_api_users_delete_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/admins/create_runner": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Runner */
		post: operations["create_runner_api_admins_create_runner_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/admins/test": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Admin Test */
		get: operations["admin_test_api_admins_test_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/submit_settings": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Submit Settings */
		post: operations["submit_settings_api_jobs_submit_settings_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/default_settings": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Default Settings */
		get: operations["get_default_settings_api_jobs_default_settings_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/submit_job": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Submit Job */
		post: operations["submit_job_api_jobs_submit_job_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/count": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Job Count */
		get: operations["job_count_api_jobs_count_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/get": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get */
		get: operations["get_api_jobs_get_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Job Info */
		get: operations["job_info_api_jobs_info_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/abort": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Abort Jobs */
		post: operations["abort_jobs_api_jobs_abort_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/delete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete Jobs */
		delete: operations["delete_jobs_api_jobs_delete_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/download_transcript": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Download Transcript */
		get: operations["download_transcript_api_jobs_download_transcript_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/jobs/events": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Events */
		get: operations["events_api_jobs_events_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Register
		 * @description Registers the given runner as online. Returns False if the
		 *     runner is already registered as online or True otherwise.
		 *     Starting from the registration, the runner must periodically send
		 *     heartbeat requests to the manager, or it may be unregistered.
		 */
		post: operations["register_api_runners_register_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/unregister": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Unregister Runner
		 * @description Unregisters an online runner.
		 */
		post: operations["unregister_runner_api_runners_unregister_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/retrieve_job_info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Retrieve Job Info */
		get: operations["retrieve_job_info_api_runners_retrieve_job_info_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/retrieve_job_audio": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Retrieve Job Audio
		 * @description For a given online runner, retrieves the job that it has been assigned.
		 *     Additionally, if the runner wasn't marked as processing the job yet, it
		 *     marks it as such. If the runner has not been assigned a job, it returns
		 *     None and does nothing.
		 */
		post: operations["retrieve_job_audio_api_runners_retrieve_job_audio_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/submit_job_result": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Submit Job Result
		 * @description Handles the submission of a job result by a runner. If the runner is not currently
		 *     processing a job, returns an error message. Otherwise, marks the job as completed/failed
		 *     by setting either the transcript or the error_msg field of the job, marks the runner as
		 *     available and returns None.
		 */
		post: operations["submit_job_result_api_runners_submit_job_result_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/runners/heartbeat": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Heartbeat */
		post: operations["heartbeat_api_runners_heartbeat_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/about": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** About */
		get: operations["about_api_about_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth_settings": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Auth Settings */
		get: operations["auth_settings_api_auth_settings_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/oidc/login/{idp_name}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Oidc-Redirect */
		get: operations["oidc_redirect_api_oidc_login__idp_name__get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/oidc/auth/{idp_name}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Oidc-Auth */
		get: operations["oidc_auth_api_oidc_auth__idp_name__get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/ldap/login/{idp_name}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Login */
		post: operations["login_api_ldap_login__idp_name__post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Login */
		post: operations["login_api_local_account_login_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/signup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Signup */
		post: operations["signup_api_local_account_signup_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/activate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Activate */
		post: operations["activate_api_local_account_activate_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/resend_activation_email": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Resend Activation Email */
		get: operations["resend_activation_email_api_local_account_resend_activation_email_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/request_password_reset": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Request Password Reset */
		get: operations["request_password_reset_api_local_account_request_password_reset_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/reset_password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Reset Password */
		post: operations["reset_password_api_local_account_reset_password_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/change_user_email": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Change User Email */
		post: operations["change_user_email_api_local_account_change_user_email_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/local-account/change_user_password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Change User Password */
		post: operations["change_user_password_api_local_account_change_user_password_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** AboutResponse */
		AboutResponse: {
			/** Description */
			description: string;
			/** Source Code */
			source_code: string;
			/** Version */
			version: string;
		};
		/** AlignmentProcessingSettings */
		AlignmentProcessingSettings: {
			/**
			 * Highlight Words
			 * @default false
			 */
			highlight_words: boolean;
			/** Max Line Count */
			max_line_count?: number | null;
			/** Max Line Width */
			max_line_width?: number | null;
		};
		/** AlignmentSettings */
		AlignmentSettings: {
			/** @default {
			 *       "highlight_words": false
			 *     } */
			processing: components["schemas"]["AlignmentProcessingSettings"];
			/**
			 * Return Char Alignments
			 * @default false
			 */
			return_char_alignments: boolean;
			/** @default nearest */
			interpolate_method: components["schemas"]["InterpolateMethodEnum"];
		};
		/** AsrSettings */
		AsrSettings: {
			/**
			 * Beam Size
			 * @default 5
			 */
			beam_size: number;
			/**
			 * Patience
			 * @default 1
			 */
			patience: number;
			/**
			 * Length Penalty
			 * @default 1
			 */
			length_penalty: number;
			/**
			 * Temperature
			 * @default 0
			 */
			temperature: number;
			/**
			 * Temperature Increment On Fallback
			 * @default 0.2
			 */
			temperature_increment_on_fallback: number;
			/**
			 * Compression Ratio Threshold
			 * @default 2.4
			 */
			compression_ratio_threshold: number;
			/**
			 * Log Prob Threshold
			 * @default -1
			 */
			log_prob_threshold: number;
			/**
			 * No Speech Threshold
			 * @default 0.6
			 */
			no_speech_threshold: number;
			/** Initial Prompt */
			initial_prompt?: string | null;
			/**
			 * Suppress Tokens
			 * @default [
			 *       -1
			 *     ]
			 */
			suppress_tokens: number[];
			/**
			 * Suppress Numerals
			 * @default false
			 */
			suppress_numerals: boolean;
		};
		/** AuthSettings */
		AuthSettings: {
			local_account: components["schemas"]["LocalAccountSettingsBase"];
			/** Oidc Providers */
			oidc_providers: {
				[key: string]: components["schemas"]["ProviderSettingsBase"];
			};
			/** Ldap Providers */
			ldap_providers: {
				[key: string]: components["schemas"]["ProviderSettingsBase"];
			};
		};
		/** Body_change_user_email_api_local_account_change_user_email_post */
		Body_change_user_email_api_local_account_change_user_email_post: {
			new_email: components["schemas"]["EmailValidated"];
			/**
			 * Password
			 * Format: password
			 */
			password: string;
		};
		/** Body_change_user_password_api_local_account_change_user_password_post */
		Body_change_user_password_api_local_account_change_user_password_post: {
			new_password: components["schemas"]["PasswordValidated"];
			/**
			 * Password
			 * Format: password
			 */
			password: string;
		};
		/** Body_login_api_ldap_login__idp_name__post */
		Body_login_api_ldap_login__idp_name__post: {
			/** Grant Type */
			grant_type?: string | null;
			/** Username */
			username: string;
			/** Password */
			password: string;
			/**
			 * Scope
			 * @default
			 */
			scope: string;
			/** Client Id */
			client_id?: string | null;
			/** Client Secret */
			client_secret?: string | null;
		};
		/** Body_login_api_local_account_login_post */
		Body_login_api_local_account_login_post: {
			/** Grant Type */
			grant_type?: string | null;
			/** Username */
			username: string;
			/** Password */
			password: string;
			/**
			 * Scope
			 * @default
			 */
			scope: string;
			/** Client Id */
			client_id?: string | null;
			/** Client Secret */
			client_secret?: string | null;
		};
		/** Body_submit_job_api_jobs_submit_job_post */
		Body_submit_job_api_jobs_submit_job_post: {
			/**
			 * Audio File
			 * Format: binary
			 */
			audio_file: string;
		};
		/** DecodedAuthTokenData */
		DecodedAuthTokenData: {
			user_type: components["schemas"]["UserTypeEnum"];
			/** Sub */
			sub: string;
			email: components["schemas"]["EmailValidated"];
			/** Is Verified */
			is_verified: boolean;
			/** Token Id */
			token_id?: number | null;
			/** Is Admin */
			is_admin: boolean;
			/** Iss */
			iss: string;
		};
		/** DiarizationSettings */
		DiarizationSettings: {
			/** Min Speakers */
			min_speakers?: number | null;
			/** Max Speakers */
			max_speakers?: number | null;
		};
		/** EmailValidated */
		EmailValidated: string;
		/**
		 * ErrorResponse
		 * @example {
		 *       "detail": "error message"
		 *     }
		 */
		ErrorResponse: {
			/** Detail */
			detail: string;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components["schemas"]["ValidationError"][];
		};
		/** HeartbeatRequest */
		HeartbeatRequest: {
			/**
			 * Progress
			 * @default 0
			 */
			progress: number;
		};
		/** HeartbeatResponse */
		HeartbeatResponse: {
			/**
			 * Abort
			 * @default false
			 */
			abort: boolean;
			/**
			 * Job Assigned
			 * @default false
			 */
			job_assigned: boolean;
		};
		/**
		 * InterpolateMethodEnum
		 * @enum {string}
		 */
		InterpolateMethodEnum: "nearest" | "linear" | "ignore";
		/** JobInfo */
		JobInfo: {
			/** Id */
			id: number;
			/**
			 * Progress
			 * @default 0
			 */
			progress: number;
			/**
			 * Abort
			 * @default false
			 */
			abort: boolean;
			/**
			 * Creation Timestamp
			 * Format: date-time
			 */
			creation_timestamp: string;
			/** File Name */
			file_name: string;
			/** Finish Timestamp */
			finish_timestamp: string | null;
			/** Runner Name */
			runner_name: string | null;
			/** Runner Id */
			runner_id: number | null;
			/** Runner Version */
			runner_version: string | null;
			/** Runner Git Hash */
			runner_git_hash: string | null;
			/** Runner Source Code Url */
			runner_source_code_url: string | null;
			/** Downloaded */
			downloaded: boolean | null;
			/** Error Msg */
			error_msg: string | null;
			/** @default {
			 *       "task": "transcribe",
			 *       "model": "large",
			 *       "alignment": {
			 *         "interpolate_method": "nearest",
			 *         "processing": {
			 *           "highlight_words": false
			 *         },
			 *         "return_char_alignments": false
			 *       },
			 *       "vad_settings": {
			 *         "chunk_size": 30,
			 *         "vad_offset": 0.363,
			 *         "vad_onset": 0.5
			 *       },
			 *       "asr_settings": {
			 *         "beam_size": 5,
			 *         "compression_ratio_threshold": 2.4,
			 *         "length_penalty": 1,
			 *         "log_prob_threshold": -1,
			 *         "no_speech_threshold": 0.6,
			 *         "patience": 1,
			 *         "suppress_numerals": false,
			 *         "suppress_tokens": [
			 *           -1
			 *         ],
			 *         "temperature": 0,
			 *         "temperature_increment_on_fallback": 0.2
			 *       },
			 *       "email_notification": false
			 *     } */
			settings: components["schemas"]["JobSettings-Output"];
			step: components["schemas"]["JobStatus"];
		};
		/**
		 * JobLangEnum
		 * @enum {string}
		 */
		JobLangEnum:
			| "af"
			| "am"
			| "ar"
			| "as"
			| "az"
			| "ba"
			| "be"
			| "bg"
			| "bn"
			| "bo"
			| "br"
			| "bs"
			| "ca"
			| "cs"
			| "cy"
			| "da"
			| "de"
			| "el"
			| "en"
			| "es"
			| "et"
			| "eu"
			| "fa"
			| "fi"
			| "fo"
			| "fr"
			| "gl"
			| "gu"
			| "ha"
			| "haw"
			| "he"
			| "hi"
			| "hr"
			| "ht"
			| "hu"
			| "hy"
			| "id"
			| "is"
			| "it"
			| "ja"
			| "jw"
			| "ka"
			| "kk"
			| "km"
			| "kn"
			| "ko"
			| "la"
			| "lb"
			| "ln"
			| "lo"
			| "lt"
			| "lv"
			| "mg"
			| "mi"
			| "mk"
			| "ml"
			| "mn"
			| "mr"
			| "ms"
			| "mt"
			| "my"
			| "ne"
			| "nl"
			| "nn"
			| "no"
			| "oc"
			| "pa"
			| "pl"
			| "ps"
			| "pt"
			| "ro"
			| "ru"
			| "sa"
			| "sd"
			| "si"
			| "sk"
			| "sl"
			| "sn"
			| "so"
			| "sq"
			| "sr"
			| "su"
			| "sv"
			| "sw"
			| "ta"
			| "te"
			| "tg"
			| "th"
			| "tk"
			| "tl"
			| "tr"
			| "tt"
			| "uk"
			| "ur"
			| "uz"
			| "vi"
			| "yi"
			| "yo"
			| "yue"
			| "zh";
		/**
		 * JobModelEnum
		 * @enum {string}
		 */
		JobModelEnum:
			| "tiny"
			| "tiny.en"
			| "base"
			| "base.en"
			| "small"
			| "small.en"
			| "medium"
			| "medium.en"
			| "turbo"
			| "large";
		/** JobSettings */
		"JobSettings-Input": {
			/** @default transcribe */
			task: components["schemas"]["TaskEnum"];
			/** @default large */
			model: components["schemas"]["JobModelEnum"];
			language?: components["schemas"]["JobLangEnum"] | null;
			/** @default {
			 *       "processing": {
			 *         "highlight_words": false
			 *       },
			 *       "return_char_alignments": false,
			 *       "interpolate_method": "nearest"
			 *     } */
			alignment: components["schemas"]["AlignmentSettings"] | null;
			diarization?: components["schemas"]["DiarizationSettings"] | null;
			/** @default {
			 *       "vad_onset": 0.5,
			 *       "vad_offset": 0.363,
			 *       "chunk_size": 30
			 *     } */
			vad_settings: components["schemas"]["VadSettings"];
			/** @default {
			 *       "beam_size": 5,
			 *       "patience": 1,
			 *       "length_penalty": 1,
			 *       "temperature": 0,
			 *       "temperature_increment_on_fallback": 0.2,
			 *       "compression_ratio_threshold": 2.4,
			 *       "log_prob_threshold": -1,
			 *       "no_speech_threshold": 0.6,
			 *       "suppress_tokens": [
			 *         -1
			 *       ],
			 *       "suppress_numerals": false
			 *     } */
			asr_settings: components["schemas"]["AsrSettings"];
			/**
			 * Email Notification
			 * @default false
			 */
			email_notification: boolean;
		};
		/** JobSettings */
		"JobSettings-Output": {
			/** @default transcribe */
			task: components["schemas"]["TaskEnum"];
			/** @default large */
			model: components["schemas"]["JobModelEnum"];
			language?: components["schemas"]["JobLangEnum"] | null;
			/** @default {
			 *       "processing": {
			 *         "highlight_words": false
			 *       },
			 *       "return_char_alignments": false,
			 *       "interpolate_method": "nearest"
			 *     } */
			alignment: components["schemas"]["AlignmentSettings"] | null;
			diarization?: components["schemas"]["DiarizationSettings"] | null;
			/** @default {
			 *       "vad_onset": 0.5,
			 *       "vad_offset": 0.363,
			 *       "chunk_size": 30
			 *     } */
			vad_settings: components["schemas"]["VadSettings"];
			/** @default {
			 *       "beam_size": 5,
			 *       "patience": 1,
			 *       "length_penalty": 1,
			 *       "temperature": 0,
			 *       "temperature_increment_on_fallback": 0.2,
			 *       "compression_ratio_threshold": 2.4,
			 *       "log_prob_threshold": -1,
			 *       "no_speech_threshold": 0.6,
			 *       "suppress_tokens": [
			 *         -1
			 *       ],
			 *       "suppress_numerals": false
			 *     } */
			asr_settings: components["schemas"]["AsrSettings"];
			/**
			 * Email Notification
			 * @default false
			 */
			email_notification: boolean;
		};
		/** JobSettingsBase */
		JobSettingsBase: {
			/** @default transcribe */
			task: components["schemas"]["TaskEnum"];
			/** @default large */
			model: components["schemas"]["JobModelEnum"];
			language?: components["schemas"]["JobLangEnum"] | null;
			/** @default {
			 *       "processing": {
			 *         "highlight_words": false
			 *       },
			 *       "return_char_alignments": false,
			 *       "interpolate_method": "nearest"
			 *     } */
			alignment: components["schemas"]["AlignmentSettings"] | null;
			diarization?: components["schemas"]["DiarizationSettings"] | null;
			/** @default {
			 *       "vad_onset": 0.5,
			 *       "vad_offset": 0.363,
			 *       "chunk_size": 30
			 *     } */
			vad_settings: components["schemas"]["VadSettings"];
			/** @default {
			 *       "beam_size": 5,
			 *       "patience": 1,
			 *       "length_penalty": 1,
			 *       "temperature": 0,
			 *       "temperature_increment_on_fallback": 0.2,
			 *       "compression_ratio_threshold": 2.4,
			 *       "log_prob_threshold": -1,
			 *       "no_speech_threshold": 0.6,
			 *       "suppress_tokens": [
			 *         -1
			 *       ],
			 *       "suppress_numerals": false
			 *     } */
			asr_settings: components["schemas"]["AsrSettings"];
		};
		/**
		 * JobSortKey
		 * @enum {string}
		 */
		JobSortKey: "creation_time" | "filename";
		/**
		 * JobStatus
		 * @description Represents all the possible statuses that a
		 *     job request might have.
		 * @enum {string}
		 */
		JobStatus:
			| "not_queued"
			| "pending_runner"
			| "runner_assigned"
			| "runner_in_progress"
			| "success"
			| "failed"
			| "downloaded";
		/**
		 * LocalAccountOperationModeEnum
		 * @enum {string}
		 */
		LocalAccountOperationModeEnum:
			| "disabled"
			| "no-signup_hidden"
			| "no-signup"
			| "enabled";
		/** LocalAccountSettingsBase */
		LocalAccountSettingsBase: {
			/**
			 * @description
			 *             To what extend local accounts should be enabled.
			 *             - enabled: Both login and signup possible and advertised in frontend to users (default).
			 *             - no_signup: Login possible and advertised to users, signup not. Thus users can only login using already existing accounts (created through provisioning or by signup before this setting was set). Use this for example if you want users to login using local accounts that you created for them through provisioning.
			 *             - no_signup_hidden: Login still possible but not advertised to users in the frontend. Especially helpful if the only local accounts should be provisioned admin accounts for administration purposes while normal users should only login using oidc or ldap accounts.
			 *             - disabled: no login, no signup, no provisioned accounts. Login only through ldap and oidc. Please note that in this case you need to provide admin accounts through ldap or oidc as well!
			 *
			 * @default enabled
			 */
			mode: components["schemas"]["LocalAccountOperationModeEnum"];
			/**
			 * Allowed Email Domains
			 * @default []
			 */
			allowed_email_domains: string[];
			/**
			 * Allow Creation Of Api Tokens
			 * @description If set to true then users logged in with local accounts can create api tokens with infinite lifetime. They will get invalidated if the user gets deleted.
			 * @default true
			 */
			allow_creation_of_api_tokens: boolean;
		};
		/** PasswordResetData */
		PasswordResetData: {
			/**
			 * Token
			 * Format: password
			 */
			token: string;
			new_password: components["schemas"]["PasswordValidated"];
		};
		/**
		 * PasswordValidated
		 * Format: password
		 */
		PasswordValidated: string;
		/** ProviderSettingsBase */
		ProviderSettingsBase: {
			/**
			 * Hidden
			 * @description Whether this provider should not be advertised to the user on the frontend. Useful if this provider should only provide admin accounts.
			 * @default false
			 */
			hidden: boolean;
			/**
			 * Icon Url
			 * @description URL to a square icon that will be shown to the user in the frontend next to the 'Login with <name>' to visually represent the account/identity provider. Should be a link to a square png with transparent background, or alternatively to a svg
			 */
			icon_url?: string | null;
			/**
			 * Allow Creation Of Api Tokens
			 * @description If set to true then users logged in from this identity provider can create api tokens with infinite lifetime. These tokens will not be automatically invalidated if the user gets deleted or looses permissions in the identity provider. This means that with this setting enabled, users that ones have access to Project-W can retain that access possibly forever. Consider if this is a problem for you before enabling this!
			 * @default false
			 */
			allow_creation_of_api_tokens: boolean;
		};
		/** RunnerCreatedInfo */
		RunnerCreatedInfo: {
			/** Id */
			id: number;
			/** Token */
			token: string;
		};
		/** RunnerJobInfoResponse */
		RunnerJobInfoResponse: {
			/** Id */
			id: number;
			settings: components["schemas"]["JobSettingsBase"];
		};
		/** RunnerRegisterRequest */
		RunnerRegisterRequest: {
			/** Name */
			name: string;
			/** Version */
			version: string;
			/** Git Hash */
			git_hash: string;
			/** Source Code Url */
			source_code_url: string;
			/** Priority */
			priority: number;
		};
		/** RunnerSubmitResultRequest */
		RunnerSubmitResultRequest: {
			/** Error Msg */
			error_msg?: string | null;
			transcript?: components["schemas"]["Transcript"] | null;
		};
		/** SignupData */
		SignupData: {
			email: components["schemas"]["EmailValidated"];
			password: components["schemas"]["PasswordValidated"];
		};
		/**
		 * TaskEnum
		 * @enum {string}
		 */
		TaskEnum: "transcribe" | "translate";
		/** TokenSecretInfo */
		TokenSecretInfo: {
			/** Id */
			id: number;
			/** Name */
			name: string | null;
			/** Temp Token Secret */
			temp_token_secret: boolean;
		};
		/** Transcript */
		Transcript: {
			/** As Txt */
			as_txt: string;
			/** As Srt */
			as_srt: string;
			/** As Tsv */
			as_tsv: string;
			/** As Vtt */
			as_vtt: string;
			/** As Json */
			as_json: {
				[key: string]: unknown;
			};
		};
		/**
		 * TranscriptTypeEnum
		 * @enum {string}
		 */
		TranscriptTypeEnum: "as_txt" | "as_srt" | "as_tsv" | "as_vtt" | "as_json";
		/** User */
		User: {
			/** Id */
			id: number;
			email: components["schemas"]["EmailValidated"];
			/** Provider Name */
			provider_name: string;
			user_type: components["schemas"]["UserTypeEnum"];
			/** Is Admin */
			is_admin: boolean;
			/** Is Verified */
			is_verified: boolean;
		};
		/**
		 * UserTypeEnum
		 * @enum {string}
		 */
		UserTypeEnum: "local" | "ldap" | "oidc";
		/** VadSettings */
		VadSettings: {
			/**
			 * Vad Onset
			 * @default 0.5
			 */
			vad_onset: number;
			/**
			 * Vad Offset
			 * @default 0.363
			 */
			vad_offset: number;
			/**
			 * Chunk Size
			 * @default 30
			 */
			chunk_size: number;
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	invalidate_token_api_users_invalidate_token_delete: {
		parameters: {
			query: {
				token_id: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	invalidate_all_tokens_api_users_invalidate_all_tokens_delete: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	get_new_api_token_api_users_get_new_api_token_post: {
		parameters: {
			query: {
				name: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Creation of api tokens is disabled for your identity provider */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	get_all_token_info_api_users_get_all_token_info_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TokenSecretInfo"][];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	token_info_api_users_info_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DecodedAuthTokenData"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	user_info_api_users_info_db_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	delete_user_api_users_delete_delete: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	create_runner_api_admins_create_runner_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RunnerCreatedInfo"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	admin_test_api_admins_test_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	submit_settings_api_jobs_submit_settings_post: {
		parameters: {
			query?: {
				is_new_default?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["JobSettings-Input"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	get_default_settings_api_jobs_default_settings_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["JobSettings-Output"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	submit_job_api_jobs_submit_job_post: {
		parameters: {
			query?: {
				job_settings_id?: number | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"multipart/form-data": components["schemas"]["Body_submit_job_api_jobs_submit_job_post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number;
				};
			};
			/** @description Not an audio file or provided job_settings_id was invalid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	job_count_api_jobs_count_get: {
		parameters: {
			query: {
				exclude_finished: boolean;
				exclude_downloaded: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	get_api_jobs_get_get: {
		parameters: {
			query: {
				start_index: number;
				end_index: number;
				sort_key: components["schemas"]["JobSortKey"];
				descending: boolean;
				exclude_finished: boolean;
				exclude_downloaded: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number[];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	job_info_api_jobs_info_get: {
		parameters: {
			query: {
				job_ids: number[];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["JobInfo"][];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	abort_jobs_api_jobs_abort_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": number[];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description At least one of jobs is not running */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	delete_jobs_api_jobs_delete_delete: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": number[];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description At least one of jobs is running */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	download_transcript_api_jobs_download_transcript_get: {
		parameters: {
			query: {
				job_id: number;
				transcript_type: components["schemas"]["TranscriptTypeEnum"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						| string
						| {
								[key: string]: unknown;
						  };
				};
			};
			/** @description No job with that id exists or that job isn't finished */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	events_api_jobs_events_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	register_api_runners_register_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RunnerRegisterRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number;
				};
			};
			/** @description Runner already registered */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	unregister_runner_api_runners_unregister_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	retrieve_job_info_api_runners_retrieve_job_info_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RunnerJobInfoResponse"];
				};
			};
			/** @description No job assigned or job not in database */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	retrieve_job_audio_api_runners_retrieve_job_audio_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
			/** @description No job assigned */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	submit_job_result_api_runners_submit_job_result_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RunnerSubmitResultRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Runner not processing a job */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	heartbeat_api_runners_heartbeat_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["HeartbeatRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HeartbeatResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	about_api_about_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AboutResponse"];
				};
			};
		};
	};
	auth_settings_api_auth_settings_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AuthSettings"];
				};
			};
		};
	};
	oidc_redirect_api_oidc_login__idp_name__get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				idp_name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	oidc_auth_api_oidc_auth__idp_name__get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				idp_name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
			/** @description Could not authorize IdP access token */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of id_token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Not enough information or missing scope */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	login_api_ldap_login__idp_name__post: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				idp_name: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/x-www-form-urlencoded": components["schemas"]["Body_login_api_ldap_login__idp_name__post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description idp_name is invalid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Authentication was unsuccessful */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	login_api_local_account_login_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/x-www-form-urlencoded": components["schemas"]["Body_login_api_local_account_login_post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Authentication was unsuccessful */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	signup_api_local_account_signup_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SignupData"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Email or password have invalid syntax */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Signup of new accounts is disabled on this server */
			405: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	activate_api_local_account_activate_post: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Activation token doesn't match any user, or user has already been activated */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Activation token invalid */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	resend_activation_email_api_local_account_resend_activation_email_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description User is not a local Project-W user or has been provisioned through the config file */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	request_password_reset_api_local_account_request_password_reset_get: {
		parameters: {
			query: {
				email: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Email invalid */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	reset_password_api_local_account_reset_password_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PasswordResetData"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description Password reset token doesn't match any user */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Password reset token invalid */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	change_user_email_api_local_account_change_user_email_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Body_change_user_email_api_local_account_change_user_email_post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description User is not a local Project-W user or has been provisioned through the config file */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	change_user_password_api_local_account_change_user_password_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Body_change_user_password_api_local_account_change_user_password_post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
			/** @description User is not a local Project-W user or has been provisioned through the config file */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation error of JWT token */
			401: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Token doesn't grand enough permissions */
			403: {
				headers: {
					"WWW-Authenticate"?: unknown;
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
}
type ReadonlyArray<T> = [Exclude<T, undefined>] extends [unknown[]]
	? Readonly<Exclude<T, undefined>>
	: Readonly<Exclude<T, undefined>[]>;
export const interpolateMethodEnumValues: ReadonlyArray<
	components["schemas"]["InterpolateMethodEnum"]
> = ["nearest", "linear", "ignore"];
export const jobLangEnumValues: ReadonlyArray<
	components["schemas"]["JobLangEnum"]
> = [
	"af",
	"am",
	"ar",
	"as",
	"az",
	"ba",
	"be",
	"bg",
	"bn",
	"bo",
	"br",
	"bs",
	"ca",
	"cs",
	"cy",
	"da",
	"de",
	"el",
	"en",
	"es",
	"et",
	"eu",
	"fa",
	"fi",
	"fo",
	"fr",
	"gl",
	"gu",
	"ha",
	"haw",
	"he",
	"hi",
	"hr",
	"ht",
	"hu",
	"hy",
	"id",
	"is",
	"it",
	"ja",
	"jw",
	"ka",
	"kk",
	"km",
	"kn",
	"ko",
	"la",
	"lb",
	"ln",
	"lo",
	"lt",
	"lv",
	"mg",
	"mi",
	"mk",
	"ml",
	"mn",
	"mr",
	"ms",
	"mt",
	"my",
	"ne",
	"nl",
	"nn",
	"no",
	"oc",
	"pa",
	"pl",
	"ps",
	"pt",
	"ro",
	"ru",
	"sa",
	"sd",
	"si",
	"sk",
	"sl",
	"sn",
	"so",
	"sq",
	"sr",
	"su",
	"sv",
	"sw",
	"ta",
	"te",
	"tg",
	"th",
	"tk",
	"tl",
	"tr",
	"tt",
	"uk",
	"ur",
	"uz",
	"vi",
	"yi",
	"yo",
	"yue",
	"zh",
];
export const jobModelEnumValues: ReadonlyArray<
	components["schemas"]["JobModelEnum"]
> = [
	"tiny",
	"tiny.en",
	"base",
	"base.en",
	"small",
	"small.en",
	"medium",
	"medium.en",
	"turbo",
	"large",
];
export const jobSortKeyValues: ReadonlyArray<
	components["schemas"]["JobSortKey"]
> = ["creation_time", "filename"];
export const jobStatusValues: ReadonlyArray<
	components["schemas"]["JobStatus"]
> = [
	"not_queued",
	"pending_runner",
	"runner_assigned",
	"runner_in_progress",
	"success",
	"failed",
	"downloaded",
];
export const localAccountOperationModeEnumValues: ReadonlyArray<
	components["schemas"]["LocalAccountOperationModeEnum"]
> = ["disabled", "no-signup_hidden", "no-signup", "enabled"];
export const taskEnumValues: ReadonlyArray<components["schemas"]["TaskEnum"]> =
	["transcribe", "translate"];
export const transcriptTypeEnumValues: ReadonlyArray<
	components["schemas"]["TranscriptTypeEnum"]
> = ["as_txt", "as_srt", "as_tsv", "as_vtt", "as_json"];
export const userTypeEnumValues: ReadonlyArray<
	components["schemas"]["UserTypeEnum"]
> = ["local", "ldap", "oidc"];
